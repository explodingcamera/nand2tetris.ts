// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    // we go through the comparison in reverse-order,
    // so the last mux takes precedent and so on

    // inc[t] == 1
    Inc16(in=reg, out=inplus1);
    Mux16(a=reg, b=inplus1, sel=inc, out=set0);

    // load[t] == 1
    Mux16(a=set0, b=in, sel=load, out=set1);
    
    // reset[t] == 1
    Mux16(a=set1, b[0..15]=false, sel=reset, out=set);

    // load can be always true since `set` will be set
    // to `reg` if we don't want to update the register
    Register(in=set, load=true, out=out, out=reg);
}
